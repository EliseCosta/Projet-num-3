{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Projet numérique 3 : câble sous-marin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Philomène Blot\n",
    "\n",
    "Elise Costa"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QUESTIONS THEORIQUES"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le théorème du cours qui nous autorise à estimer l'espérance conditionnelle par la moyenne empirique de simulations conditionnelles est la loi des grands nombres. La loi faible suffit d'ailleurs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On se ramène au cas des pages 12 et 13 de la leçon \"Probabilités IV\".\n",
    "\n",
    "Pour ce faire, on réarrange les termes en posant $Z' = (Z_{inconnu}, Z_{connu})$ où $Z_{inconnu}$ contient les $k-1$ valeurs inconnues des profondeurs et $Z_{connu}$ les $N-k+1$ valeurs connues. En adaptant les notations de la leçon, on obtient que :\n",
    "\n",
    "$f_{Z_{inconnu}|Z_{connu}=z_{c}}(z) = \\frac{1}{(2\\pi)^{\\frac{k}{2}} \\sqrt{det(CS_{Z_{inconnu}})}} exp(- \\frac{1}{2}(z - \\psi(z_c)^t C(S_{Z_{inconnu}})^{-1}(z - \\psi(z_c))$\n",
    "\n",
    "Pour obtenir la loi, il suffit alors d'intégrer.\n",
    "\n",
    "On obtient donc que $Z_{inconnu}|Z_{connu}$ suit une gaussienne de matrice de covariance $C_{Z_{inconnu}|Z_{connu}}$ et d'espérance $m_{Z_{inconnu}| Z_{connu}= z_{c}}$ : \n",
    "\n",
    "$C S_{Z_{inconnu}|Z_{connu}}=C_{Z_{inconnu}|Z_{connu}}-C_{{Z_{inconnu}|Z_{connu}}, Z_{connu}} C_{Z_{connu}}^{-1} C_{Z_{connu}, {Z_{inconnu}|Z_{connu}}}$\n",
    "\n",
    "$m_{Z_{inconnu}| Z_{connu}= z_{c}}=\\psi(z_{c})=m_{Z_{inconnu}}+C_{Z_{inconnu}, Z_{connu}} C_{Z_{connu}}^{-1}\\left(z_{c}-m_{Z_{connu}}\\right)$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a : $Z = m + RY$\n",
    "\n",
    "Soit, en explicitant les composantes de $Z$, $m$,$R$ et $Y$ de taille respective $p$x$1$, $p$x$1$, $p$x$p$ et $p$x$1$ par calcul matriciel :\n",
    "\n",
    "$\\left( \\begin{array}{c}\n",
    "Z_1 \\\\\n",
    "Z_2 \\\\\n",
    "\\vdots \\\\\n",
    "Z_p\n",
    "\\end{array} \\right)$ = \n",
    "$\\left( \\begin{array}{c}\n",
    "m_1 \\\\\n",
    "m_2 \\\\\n",
    "\\vdots \\\\\n",
    "m_p\n",
    "\\end{array} \\right)$ + \n",
    "$\n",
    "\\begin{pmatrix}\n",
    "R_{1,1} & R_{1,2} & \\cdots & R_{1,p} \\\\\n",
    "R_{2,1} & R_{2,2} & \\cdots & R_{2,p} \\\\\n",
    "\\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\n",
    "R_{p,1} & R_{p,2} & \\cdots & R_{p,p} \n",
    "\\end{pmatrix}$\n",
    "$\\left( \\begin{array}{c}\n",
    "Y_1 \\\\\n",
    "Y_2 \\\\\n",
    "\\vdots \\\\\n",
    "Y_p\n",
    "\\end{array} \\right)$\n",
    "\n",
    "Ainsi : pour tout $j$ de $\\{1,2,...,p\\}$, on a : $Z_j = m_j + \\sum \\limits_{i=p}^n R_{ji}Y_i $. $Z_j$ est donc la combinaison linéaire d'une constante et de gaussiennes (la multiplication par les constantes de $R$ ne change rien au caractère gaussien des $Y_i$). $Z_j$ suit donc une loi gaussienne.\n",
    "\n",
    "Par linératité de l'espérance : \n",
    "$\\mathbb{E}(Z_j)$ = $\\mathbb{E}(m_j + \\sum \\limits_{i=p}^n R_{ji}Y_i)$ = $\\mathbb{E}(m_j) + \\sum \\limits_{i=p}^n R_{ji}\\mathbb{E}(Y_i)$ = $\\mathbb{E}(m_j) = m_j$.\n",
    "\n",
    "En effet, pour tout $i$, $Y_i$ est d'espérance nulle et pour tout $j$, $m_j$ est une constance.\n",
    "\n",
    "Pour la variance :\n",
    "\n",
    "$\\mathbb{V}(Z_j)$ = $\\mathbb{V}(m_j + \\sum \\limits_{i=p}^n R_{ji}Y_i)  $ = $\\mathbb{V}(\\sum \\limits_{i=p}^n R_{ji}Y_i)$ car les $m_j$ sont des constantes.\n",
    "\n",
    "Or, comme les $Y_i$ sont indépendants entre eux, la variance est 2_homogène? On obtient finalement :\n",
    "\n",
    "$\\mathbb{V}(Z_j)$ = $\\sum \\limits_{i=p}^n R_{1i}^2\\mathbb{V}(Y_i)  $\n",
    "\n",
    "En conclusion : $Z_j$ suit une loi normale de paramètre $(m_j, \\sum \\limits_{i=p}^n R_{ji}^2\\mathbb{V}(Y_i))$.\n",
    "\n",
    "Par la leçon Probabilités V (page 11), on a même que $\\mathbb{V}(Z) = RR^T$. Ce résultat généralise celui prouvé pour la variance des $Z_j$ car $\\mathbb{V}(Z_j) = \\mathbb{Cov}(Z_j, Z_j)$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Algorithme de similation conditionnelle :\n",
    "\n",
    "$\\textbf{1/}$ Simuler un $Y$, vecteur aléatoire gaussien centré réduite dont les coordonnées sont indépendantes avec la fonction np.random.normal(0,1, p) avec p les profondeurs inconnues\n",
    "\n",
    "$\\textbf{2/}$ Poser $m$ comme l'espérance conditionnelle de $Z = Z_{inconnu}$ sachant $Z_{connu}$ \n",
    "\n",
    "$\\textbf{3/}$ Poser $R$ définit par $C = RR^T$ où $C$ est la matrice de covariance conditionnelle (décomposition de Cholesky de la matrice de covariance conditionnelle)\n",
    "\n",
    "$\\textbf{4/}$ Calculer $ Z = m + RY$\n",
    "\n",
    "Pour simuler $Y$, on aurait aussi pu remplacer $\\textbf{1/}$ par \n",
    "\n",
    "\n",
    "$\\textbf{a/}$ Simuler deux variables aléaroires $U_j$ et $V_j$ (que l'on considérera indépendantes) avec rd.random() (où rd est l'abréviation du module $\\textit{random}$) suivant une loi uniforme sur $]0,1[$\n",
    "\n",
    "$\\textbf{b/}$ Simuler une variable aléatoire de loi gaussienne centrée-réduite par la formule$Y_j=\\sqrt{-2ln(U_j)}$cos(2$\\pi V_j)$ (méthode de Box Muller du cours Probabilités V à la page 10)\n",
    "\n",
    "$\\textbf{c/}$ Itérer l'opération $p$ fois  (ce nombre correspond aux nombres de profondeurs inconnues) pour construire $Y$\n",
    "\n",
    "Cependant, nous n'aurions pas la certitude de l'indépendance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IMPLEMENTATION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On recopie les données."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "import random as rd\n",
    "\n",
    "A = 0\n",
    "B = 500\n",
    "N = 101\n",
    "Delta = (B-A)/(N)\n",
    "discretization_indexes = np.arange(N)\n",
    "discretization = discretization_indexes*Delta\n",
    "\n",
    "mu = -5\n",
    "a = 50\n",
    "sigma2 = 12\n",
    "observation_indexes = [0,20,40,60,80,100]\n",
    "depth = np.array([0,-4,-12.8,-1,-6.5,0])\n",
    "\n",
    "unknown_indexes = list(set(discretization_indexes)-set((observation_indexes)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On écrit une telle façon, sachant que le type en Python est assez souple quand on définit une fonction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calcul_distance(distance, a, sigma2) :\n",
    "    exp_vect = np.vectorize(np.exp)\n",
    "    div2_vect = np.vectorize(lambda x : x/2)\n",
    "    return sigma2*exp_vect(-np.abs(div2_vect(distance)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "distance = np.array([[2,2],[2,2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.41455329, 4.41455329],\n",
       "       [4.41455329, 4.41455329]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calcul_distance(distance,a,sigma2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La distance est celle entre les abscisses :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "distance = np.zeros((N,N))\n",
    "\n",
    "for i in range(N) :\n",
    "    for j in range(i,N) :\n",
    "        distance[i,j] = abs(Delta*(i-j))\n",
    "        distance[j,i] = distance[i,j]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.        ,   4.95049505,   9.9009901 , ..., 485.14851485,\n",
       "        490.0990099 , 495.04950495],\n",
       "       [  4.95049505,   0.        ,   4.95049505, ..., 480.1980198 ,\n",
       "        485.14851485, 490.0990099 ],\n",
       "       [  9.9009901 ,   4.95049505,   0.        , ..., 475.24752475,\n",
       "        480.1980198 , 485.14851485],\n",
       "       ...,\n",
       "       [485.14851485, 480.1980198 , 475.24752475, ...,   0.        ,\n",
       "          4.95049505,   9.9009901 ],\n",
       "       [490.0990099 , 485.14851485, 480.1980198 , ...,   4.95049505,\n",
       "          0.        ,   4.95049505],\n",
       "       [495.04950495, 490.0990099 , 485.14851485, ...,   9.9009901 ,\n",
       "          4.95049505,   0.        ]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On applique à la matrice de distance trouvée à la question 2 la fonction de la question 1. (Il y a une erreur d'indexation dans l'énoncé : $ \\textbf{Z} = (Z(x_0),...,Z(x_{N-1}))$ )."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "mat_cov_Z = calcul_distance(distance, a, sigma2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.20000000e+001, 1.00970592e+000, 8.49588379e-002, ...,\n",
       "        5.37674939e-105, 4.52411309e-106, 3.80668650e-107],\n",
       "       [1.00970592e+000, 1.20000000e+001, 1.00970592e+000, ...,\n",
       "        6.39007765e-104, 5.37674939e-105, 4.52411309e-106],\n",
       "       [8.49588379e-002, 1.00970592e+000, 1.20000000e+001, ...,\n",
       "        7.59438267e-103, 6.39007765e-104, 5.37674939e-105],\n",
       "       ...,\n",
       "       [5.37674939e-105, 6.39007765e-104, 7.59438267e-103, ...,\n",
       "        1.20000000e+001, 1.00970592e+000, 8.49588379e-002],\n",
       "       [4.52411309e-106, 5.37674939e-105, 6.39007765e-104, ...,\n",
       "        1.00970592e+000, 1.20000000e+001, 1.00970592e+000],\n",
       "       [3.80668650e-107, 4.52411309e-106, 5.37674939e-105, ...,\n",
       "        8.49588379e-002, 1.00970592e+000, 1.20000000e+001]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mat_cov_Z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "D'après la formule donnée de la matrice de covariance, il suffit de récupérer certaines coordonnées de la matrice calculée à la question 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Matrice de covariance entre les inconnues :\n",
    "mat_cov_unknown = np.array([[mat_cov_Z[k][l] for l in unknown_indexes] for k in unknown_indexes])\n",
    "\n",
    "# Matrice de covariance entre les observations : \n",
    "mat_cov_observation = np.array([[mat_cov_Z[k][l] for l in observation_indexes] for k in observation_indexes])\n",
    "\n",
    "# Matrice de covariance entre observations et inconnues : \n",
    "mat_cov_observation_and_unknown = np.array([[mat_cov_Z[k][l] for k in observation_indexes] for l in unknown_indexes])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On sait que la variable aléatoire des inconnues selon les observations suit une gaussienne dont l'espérance est donnée grâce à la formule 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x11e13ccc0>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# On crée les deux espérances :\n",
    "m_observation = np.array([mu for i in range(len(depth))])\n",
    "m_unknown = np.array([mu for i in range(len(unknown_indexes))])\n",
    "J = np.dot(np.linalg.inv(mat_cov_observation), depth - m_observation)\n",
    "\n",
    "# On calcule l'espérance conditionnelle :\n",
    "\n",
    "E_unknown_cond = m_unknown + np.dot(mat_cov_observation_and_unknown,J)\n",
    "\n",
    "# On affiche le résultat :\n",
    "\n",
    "plt.scatter(unknown_indexes, E_unknown_cond)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Toujours d'après la formule 2), on peut calculer la matrice de variance conditionnelle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x11e19a710>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcul intermédiaire\n",
    "\n",
    "int = np.dot(np.linalg.inv(mat_cov_observation),mat_cov_observation_and_unknown.T)\n",
    "\n",
    "# Calcul\n",
    "\n",
    "mat_cov_cond = mat_cov_unknown - np.dot(mat_cov_observation_and_unknown,int)\n",
    "\n",
    "# On recupère les données sur la diagonale :\n",
    "\n",
    "d = []\n",
    "\n",
    "for i in range (mat_cov_cond.shape[0]):\n",
    "   d.append(mat_cov_cond[i][i])\n",
    "\n",
    "diag = np.array(d)\n",
    "\n",
    "# On représente :\n",
    "\n",
    "plt.scatter(unknown_indexes, diag)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On effectue une simulation conditionnelle comme expliquée dans la question 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Profondeur en m')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mat_centre_reduit = np.random.normal(0,1,(len(unknown_indexes)))\n",
    "\n",
    "# On se ramène à notre cas grâce à la décomposition de Cholesky :\n",
    "\n",
    "Z = E_unknown_cond + np.dot(np.linalg.cholesky(mat_cov_cond),mat_centre_reduit)\n",
    "\n",
    "#On représente :\n",
    "\n",
    "plt.title(\"Résultats des simulations en comparaison avec les observations et l'espérance conditionnelle\")\n",
    "plt.scatter(observation_indexes,depth)\n",
    "plt.scatter(unknown_indexes,Z, c = 'yellow', marker = 's')\n",
    "plt.scatter(unknown_indexes, E_unknown_cond, c = 'red', marker = '+' )\n",
    "plt.scatter(observation_indexes, depth, c ='cyan', marker = 'o')\n",
    "plt.xlabel('Axe des x')\n",
    "plt.ylabel('Profondeur en m')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On se sert de la définition de la longueur de câble donnée dans l'énoncé."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lcable(v_profondeur,pas) : \n",
    "    longueur =  0\n",
    "    for i in range(1,len(v_profondeur)) : \n",
    "        longueur = longueur + np.sqrt(pas**2 + (v_profondeur[i] - v_profondeur[i-1])**2)\n",
    "    return(longueur) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "659.5413664538697\n"
     ]
    }
   ],
   "source": [
    "# On réalise d'abord les simulations :\n",
    "\n",
    "def simulations(n):\n",
    "    sim = np.zeros((n, len(unknown_indexes)))\n",
    "    for i in range(n) :\n",
    "        mat_centre_reduit = np.random.normal(0,1,(len(unknown_indexes)))\n",
    "        Z = E_unknown_cond + np.dot(np.linalg.cholesky(mat_cov_cond),mat_centre_reduit)\n",
    "        for k in range(len(unknown_indexes)) :\n",
    "            sim[i,k] = Z[k]\n",
    "    return sim\n",
    "\n",
    "# On calcule la moyenne des longueurs de câble :\n",
    "\n",
    "def simulations_longueur(n) :\n",
    "    sim = simulations(n)\n",
    "    L, _ = sim.shape\n",
    "\n",
    "    s_l = 0\n",
    "    for l in range(L) :\n",
    "        v = [0]*(len(unknown_indexes) + len(observation_indexes)) #on completera le vecteur pour l'instant nul avec les valeurs qu'on connaît\n",
    "        I = 0\n",
    "        for i in unknown_indexes :\n",
    "            v[i] = sim[l,I]\n",
    "            I = I + 1\n",
    "        J = 0\n",
    "        for j in observation_indexes :\n",
    "            v[j] = depth[J]\n",
    "            J = J + 1\n",
    "        s_l = s_l + lcable(v,Delta)\n",
    "\n",
    "    return s_l/n\n",
    "\n",
    "print(simulations_longueur(100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x11e31ae10>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "M = []\n",
    "L_nb_simulations = [10,100,1000,10000]\n",
    "\n",
    "for nb in L_nb_simulations :\n",
    "    M.append(simulations_longueur(nb))\n",
    "    \n",
    "plt.xlabel(\"Nombre de simulations\")\n",
    "plt.ylabel(\"Longueur moyenne du câble\")\n",
    "plt.scatter(L_nb_simulations,M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q.11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# On recense d'abord l'ensemble des longueurs dans une liste longueurs :\n",
    "longueurs = []\n",
    "\n",
    "def simulations_longueur_hist(n) :\n",
    "    sim = simulations(n)\n",
    "    L, _ = sim.shape\n",
    "\n",
    "    s_l = 0\n",
    "    for l in range(L) :\n",
    "        v = [0]*(len(unknown_indexes) + len(observation_indexes)) #on completera le vecteur pour l'instant nul avec les valeurs qu'on connaît\n",
    "        I = 0\n",
    "        for i in unknown_indexes :\n",
    "            v[i] = sim[l,I]\n",
    "            I = I + 1\n",
    "        J = 0\n",
    "        for j in observation_indexes :\n",
    "            v[j] = depth[J]\n",
    "            J = J + 1\n",
    "        longueurs.append(lcable(v,Delta))\n",
    "\n",
    "simulations_longueur_hist(100)\n",
    "\n",
    "# On réalise ensuite l'histogramme :\n",
    "\n",
    "plt.hist(longueurs, bins = 10, color = 'cyan' )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
